// FILE: src/app/api/user/profile/route.tsimport { NextRequest, NextResponse } from 'next/server';import { getServerSession } from 'next-auth/next';import { authOptions } from '../../auth/[...nextauth]/route';import {   initEnhancedDatabase,   updateUserProfile } from '@/lib/database';// GET - Retrieve user profileexport async function GET(request: NextRequest) {  try {    const session = await getServerSession(authOptions);        if (!session?.user?.email) {      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });    }    const database = await initEnhancedDatabase();    const user = await database.get('SELECT * FROM users WHERE email = ?', [session.user.email]);    if (!user) {      return NextResponse.json({ error: 'User not found' }, { status: 404 });    }    // Parse JSON fields and return formatted profile    const profile = {      id: user.id,      email: user.email,      name: user.name,      subscription_tier: user.subscription_tier,      subscription_status: user.subscription_status,            // Personal info      birth_date: user.birth_date,      birth_time: user.birth_time,      birth_location: user.birth_location,      zodiac_sign: user.zodiac_sign,      moon_sign: user.moon_sign,      rising_sign: user.rising_sign,            // Spiritual preferences      favorite_crystals: user.favorite_crystals ? JSON.parse(user.favorite_crystals) : [],      spiritual_goals: user.spiritual_goals ? JSON.parse(user.spiritual_goals) : [],      meditation_experience: user.meditation_experience,      preferred_practice_time: user.preferred_practice_time,      intention_focus: user.intention_focus,            // Contact & shipping      phone_number: user.phone_number,      shipping_first_name: user.shipping_first_name,      shipping_last_name: user.shipping_last_name,      shipping_address_line1: user.shipping_address_line1,      shipping_address_line2: user.shipping_address_line2,      shipping_city: user.shipping_city,      shipping_state: user.shipping_state,      shipping_postal_code: user.shipping_postal_code,      shipping_country: user.shipping_country,            // Jewelry preferences      preferred_metals: user.preferred_metals ? JSON.parse(user.preferred_metals) : [],      ring_size: user.ring_size,      bracelet_size: user.bracelet_size,      necklace_length_preference: user.necklace_length_preference,      crystal_allergies: user.crystal_allergies ? JSON.parse(user.crystal_allergies) : [],            // Profile completion      profile_completion_percentage: user.profile_completion_percentage || 0,      profile_completed: user.profile_completed || false,      astrology_profile_completed: user.astrology_profile_completed || false,      spiritual_profile_completed: user.spiritual_profile_completed || false,      shipping_profile_completed: user.shipping_profile_completed || false    };    return NextResponse.json(profile);  } catch (error) {    console.error('Error fetching user profile:', error);    return NextResponse.json(      { error: 'Internal server error' },      { status: 500 }    );  }}// PUT - Update user profile with proper validation and completion trackingexport async function PUT(request: NextRequest) {  try {    const session = await getServerSession(authOptions);        if (!session?.user?.email) {      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });    }    const body = await request.json();    const database = await initEnhancedDatabase();    // Get current user    const currentUser = await database.get('SELECT * FROM users WHERE email = ?', [session.user.email]);        if (!currentUser) {      return NextResponse.json({ error: 'User not found' }, { status: 404 });    }    // Prepare update data with proper field mapping    const updateData: Record<string, any> = {      // Personal & Astrological      birth_date: body.birth_date || body.birthDate || currentUser.birth_date,      birth_time: body.birth_time || body.birthTime || currentUser.birth_time,      birth_location: body.birth_location || body.birthLocation || currentUser.birth_location,      zodiac_sign: body.zodiac_sign || body.zodiacSign || currentUser.zodiac_sign,      moon_sign: body.moon_sign || body.moonSign || currentUser.moon_sign,      rising_sign: body.rising_sign || body.risingSign || currentUser.rising_sign,            // Spiritual preferences      favorite_crystals: body.favorite_crystals ? JSON.stringify(body.favorite_crystals) :                         body.favoriteCrystals ? JSON.stringify(body.favoriteCrystals) :                         currentUser.favorite_crystals,      spiritual_goals: body.spiritual_goals ? JSON.stringify(body.spiritual_goals) :                      body.spiritualGoals ? JSON.stringify(body.spiritualGoals) :                      currentUser.spiritual_goals,      meditation_experience: body.meditation_experience || body.meditationExperience || currentUser.meditation_experience,      preferred_practice_time: body.preferred_practice_time || body.preferredPracticeTime || currentUser.preferred_practice_time,      intention_focus: body.intention_focus || body.intentionFocus || currentUser.intention_focus,            // Contact & Shipping      phone_number: body.phone_number || body.phoneNumber || currentUser.phone_number,      shipping_first_name: body.shipping_first_name || body.shippingFirstName || currentUser.shipping_first_name,      shipping_last_name: body.shipping_last_name || body.shippingLastName || currentUser.shipping_last_name,      shipping_address_line1: body.shipping_address_line1 || body.shippingAddressLine1 || currentUser.shipping_address_line1,      shipping_address_line2: body.shipping_address_line2 || body.shippingAddressLine2 || currentUser.shipping_address_line2,      shipping_city: body.shipping_city || body.shippingCity || currentUser.shipping_city,      shipping_state: body.shipping_state || body.shippingState || currentUser.shipping_state,      shipping_postal_code: body.shipping_postal_code || body.shippingPostalCode || currentUser.shipping_postal_code,      shipping_country: body.shipping_country || body.shippingCountry || currentUser.shipping_country || 'US',            // Jewelry Preferences      preferred_metals: body.preferred_metals ? JSON.stringify(body.preferred_metals) :                       body.preferredMetals ? JSON.stringify(body.preferredMetals) :                       currentUser.preferred_metals,      ring_size: body.ring_size || body.ringSize || currentUser.ring_size,      bracelet_size: body.bracelet_size || body.braceletSize || currentUser.bracelet_size,      necklace_length_preference: body.necklace_length_preference || body.necklaceLengthPreference || currentUser.necklace_length_preference,      crystal_allergies: body.crystal_allergies ? JSON.stringify(body.crystal_allergies) :                        body.crystalAllergies ? JSON.stringify(body.crystalAllergies) :                        currentUser.crystal_allergies,            // Timestamps      profile_updated_at: new Date().toISOString()    };    // Calculate completion percentages    const calculateCompletion = (fields: string[]) => {      const completed = fields.filter(field => updateData[field] && updateData[field] !== '' && updateData[field] !== 'null').length;      return Math.round((completed / fields.length) * 100);    };    // Profile section completion checks    const astrologyFields = ['birth_date', 'zodiac_sign', 'moon_sign', 'rising_sign'];    const spiritualFields = ['meditation_experience', 'spiritual_goals', 'intention_focus', 'preferred_practice_time'];    const shippingFields = ['shipping_first_name', 'shipping_last_name', 'shipping_address_line1', 'shipping_city', 'shipping_state', 'shipping_postal_code'];    const jewelryFields = ['ring_size', 'preferred_metals'];    updateData.astrology_profile_completed = calculateCompletion(astrologyFields) >= 75;    updateData.spiritual_profile_completed = calculateCompletion(spiritualFields) >= 75;    updateData.shipping_profile_completed = calculateCompletion(shippingFields) >= 85;    updateData.jewelry_profile_completed = calculateCompletion(jewelryFields) >= 50;    // Overall completion    const allRequiredFields = [      ...astrologyFields,      ...spiritualFields,      ...(currentUser.subscription_tier !== 'none' ? shippingFields : [])    ];        const overallCompletion = calculateCompletion(allRequiredFields);    updateData.profile_completion_percentage = overallCompletion;    updateData.profile_completed = overallCompletion >= 90;    // Update the profile    const success = await updateUserProfile(session.user.email, updateData);    if (!success) {      return NextResponse.json({ error: 'Failed to update profile' }, { status: 500 });    }    // Return updated profile    const updatedUser = await database.get('SELECT * FROM users WHERE email = ?', [session.user.email]);        const updatedProfile = {      ...updatedUser,      favorite_crystals: updatedUser.favorite_crystals ? JSON.parse(updatedUser.favorite_crystals) : [],      spiritual_goals: updatedUser.spiritual_goals ? JSON.parse(updatedUser.spiritual_goals) : [],      preferred_metals: updatedUser.preferred_metals ? JSON.parse(updatedUser.preferred_metals) : [],      crystal_allergies: updatedUser.crystal_allergies ? JSON.parse(updatedUser.crystal_allergies) : []    };    return NextResponse.json({       success: true,       message: 'Profile updated successfully',      profile: updatedProfile    });  } catch (error) {    console.error('Error updating user profile:', error);    return NextResponse.json(      { error: 'Internal server error' },      { status: 500 }    );  }}